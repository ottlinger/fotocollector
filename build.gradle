import java.text.SimpleDateFormat

plugins {
    id 'net.researchgate.release' version '2.5.0'
}

gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS

Date buildTimeAndDate = new Date()
ext {
    // Generate JAR manifest only if code was compiled or recompiled;
    // otherwise the junit5Test task will always be executed even if
    // no code changes were made. The reason is that the generation of
    // the buildDate and buildTime causes JAR manifests to be modified
    // which triggers unnecessary rebuilding of the dependent JARs.
    generateManifest = false
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

apply plugin: 'application'
apply plugin: 'java'

tasks.withType(JavaCompile) {
    sourceCompatibility = rootProject.sourceCompatibility
    targetCompatibility = rootProject.targetCompatibility
}
test {
    testLogging {
        events "failed"
        exceptionFormat "short"

// set options for log level DEBUG
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}

// Codecov integration
apply plugin: 'jacoco'
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

apply plugin: 'eclipse'
apply plugin: 'idea'

defaultTasks 'clean', 'build'

mainClassName = 'de.aikiit.fotocollector.FotoCollectorApplication'
// https://stackoverflow.com/questions/10986244/building-a-uberjar-with-gradle
task uberjar(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from { configurations.compile.collect { zipTree(it) } } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-codec:commons-codec:1.11'
    compile 'com.google.guava:guava:24.1-jre'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile 'org.mockito:mockito-core:2.10.0'
    testCompile 'org.assertj:assertj-core:3.8.0'
}

compileJava.doLast {
    // Enable JAR manifest generation
    generateManifest = true
}

jar {
    onlyIf {
        project.generateManifest
    }
    manifest {
        attributes(
                'Implementation-Title': 'FotoCollector',
                'Implementation-Version': version,
                'Main-Class': mainClassName,
                'Built-By': System.properties['user.name'],
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                'Build-Date': buildDate,
                'Build-Time': buildTime,
                'Specification-Title': project.name,
                'Specification-Version': project.version
        )
    }
}

check.dependsOn jacocoTestReport
